FCP_score <- res$lighthouseResult$audits$"first-contentful-paint"$score
FCP <- res$lighthouseResult$audits$"first-contentful-paint"$numericValue
#Speed Index
SI_score <- res$lighthouseResult$audits$"speed-index"$score
SI <- res$lighthouseResult$audits$"speed-index"$numericValue
#Cumulative Layout Shift
CLS_score <- res$lighthouseResult$audits$"cumulative-layout-shift"$score
CLS <- res$lighthouseResult$audits$"cumulative-layout-shift"$numericValue
#Largest Contentful Paint
LCP_score <- res$lighthouseResult$audits$"largest-contentful-paint"$score
LCP <- res$lighthouseResult$audits$"largest-contentful-paint"$numericValue
#total score
TotalScore <- res$lighthouseResult$categories$performance$score
speed_ranker_df <- speed_ranker_df %>% add_row(link = uri,
TTL_score = TTL_score,
TTL = TTL,
TBT_score = TBT_score,
TBT = TBT,
FCP_score = FCP_score,
FCP= FCP,
SI_score = SI_score,
SI = SI,
CLS_score = CLS_score,
CLS = CLS,
LCP_score = LCP_score,
LCP = LCP,
TotalScore = TotalScore)
}
speed_ranker_df <- rbind(r4_finished, speed_ranker_df)
write_csv(speed_ranker_df, "./data/PageSpeed_rank4.csv")
r4 <- read_csv("./data/PageSpeed_rank4.csv")
r2 <- read_csv("./data/PageSpeed_rank2.csv")
r4_finished <- r4 %>% na.omit()
r4 <- r4 %>% filter(is.na(TotalScore)) %>% select(link)
r4
r4_finished
r4 <- read_csv("./data/PageSpeed_rank4.csv")
r2 <- read_csv("./data/PageSpeed_rank2.csv")
r4_finished <- r4 %>% na.omit()
r4 <- r4 %>% filter(is.na(TotalScore)) %>% select(link)
r4
r4_finished
links <- read_csv("./data/results.csv") %>%
filter(language %in% c("en", "ru", "iw", "ar")) %>%
filter(country %in% c("us", "US", "ru", "RU", "il", "IL", "eg", "EG"))
speed_ranker_df <- tibble(
link = character(),
TTL_score = numeric(),
TTL = numeric(),
TBT_score = numeric(),
TBT = numeric(),
FCP_score = numeric(),
FCP = numeric(),
SI_score = numeric(),
SI = numeric(),
CLS_score = numeric(),
CLS = numeric(),
LCP_score = numeric(),
LCP = numeric(),
TotalScore = numeric()
)
apiKey <- "AIzaSyDir3OWKcYVW0GkgHTkOwnUSx6N3kEsO00"
for(i in 1:nrow(r4)){
uri <- as.character(r4[i, 1])
print(as.character(uri))
res <- GET("https://pagespeedonline.googleapis.com/pagespeedonline/v5/runPagespeed", add_headers(Authorization = paste("Key", apiKey)), query = list(url = uri)) %>% content()
#time to interactive
TTL_score <- res$lighthouseResult$audits$interactive$score
TTL <- res$lighthouseResult$audits$interactive$numericValue
#total blocking time
TBT_score <- res$lighthouseResult$audits$"total-blocking-time"$score
TBT <- res$lighthouseResult$audits$"total-blocking-time"$numericValue
#First Contentful Paint
FCP_score <- res$lighthouseResult$audits$"first-contentful-paint"$score
FCP <- res$lighthouseResult$audits$"first-contentful-paint"$numericValue
#Speed Index
SI_score <- res$lighthouseResult$audits$"speed-index"$score
SI <- res$lighthouseResult$audits$"speed-index"$numericValue
#Cumulative Layout Shift
CLS_score <- res$lighthouseResult$audits$"cumulative-layout-shift"$score
CLS <- res$lighthouseResult$audits$"cumulative-layout-shift"$numericValue
#Largest Contentful Paint
LCP_score <- res$lighthouseResult$audits$"largest-contentful-paint"$score
LCP <- res$lighthouseResult$audits$"largest-contentful-paint"$numericValue
#total score
TotalScore <- res$lighthouseResult$categories$performance$score
speed_ranker_df <- speed_ranker_df %>% add_row(link = uri,
TTL_score = TTL_score,
TTL = TTL,
TBT_score = TBT_score,
TBT = TBT,
FCP_score = FCP_score,
FCP= FCP,
SI_score = SI_score,
SI = SI,
CLS_score = CLS_score,
CLS = CLS,
LCP_score = LCP_score,
LCP = LCP,
TotalScore = TotalScore)
}
speed_ranker_df <- rbind(r4_finished, speed_ranker_df)
write_csv(speed_ranker_df, "./data/PageSpeed_rank4.csv")
r4 <- read_csv("./data/PageSpeed_rank4.csv")
r2 <- read_csv("./data/PageSpeed_rank2.csv")
r4_finished <- r4 %>% na.omit()
r4 <- r4 %>% filter(is.na(TotalScore)) %>% select(link)
r4
r4_finished
r4 <- read_csv("./data/PageSpeed_rank4.csv")
r2 <- read_csv("./data/PageSpeed_rank2.csv")
r2_finished <- r2 %>% na.omit()
r2 <- r2 %>% filter(is.na(TotalScore)) %>% select(link)
r4
r4_finished
r4 <- read_csv("./data/PageSpeed_rank4.csv")
r2 <- read_csv("./data/PageSpeed_rank2.csv")
r2_finished <- r2 %>% na.omit()
r2 <- r2 %>% filter(is.na(TotalScore)) %>% select(link)
r2
r2_finished
r4 <- read_csv("./data/PageSpeed_rank4.csv")
r2 <- read_csv("./data/PageSpeed_rank2.csv")
r2_finished <- r2 %>% na.omit()
r2 <- r2 %>% filter(is.na(TotalScore)) %>% select(link)
r2
r2_finished
links <- read_csv("./data/results.csv") %>%
filter(language %in% c("en", "ru", "iw", "ar")) %>%
filter(country %in% c("us", "US", "ru", "RU", "il", "IL", "eg", "EG"))
speed_ranker_df <- tibble(
link = character(),
TTL_score = numeric(),
TTL = numeric(),
TBT_score = numeric(),
TBT = numeric(),
FCP_score = numeric(),
FCP = numeric(),
SI_score = numeric(),
SI = numeric(),
CLS_score = numeric(),
CLS = numeric(),
LCP_score = numeric(),
LCP = numeric(),
TotalScore = numeric()
)
apiKey <- "AIzaSyDir3OWKcYVW0GkgHTkOwnUSx6N3kEsO00"
for(i in 1:nrow(r2)){
uri <- as.character(r2[i, 1])
print(as.character(uri))
res <- GET("https://pagespeedonline.googleapis.com/pagespeedonline/v5/runPagespeed", add_headers(Authorization = paste("Key", apiKey)), query = list(url = uri)) %>% content()
#time to interactive
TTL_score <- res$lighthouseResult$audits$interactive$score
TTL <- res$lighthouseResult$audits$interactive$numericValue
#total blocking time
TBT_score <- res$lighthouseResult$audits$"total-blocking-time"$score
TBT <- res$lighthouseResult$audits$"total-blocking-time"$numericValue
#First Contentful Paint
FCP_score <- res$lighthouseResult$audits$"first-contentful-paint"$score
FCP <- res$lighthouseResult$audits$"first-contentful-paint"$numericValue
#Speed Index
SI_score <- res$lighthouseResult$audits$"speed-index"$score
SI <- res$lighthouseResult$audits$"speed-index"$numericValue
#Cumulative Layout Shift
CLS_score <- res$lighthouseResult$audits$"cumulative-layout-shift"$score
CLS <- res$lighthouseResult$audits$"cumulative-layout-shift"$numericValue
#Largest Contentful Paint
LCP_score <- res$lighthouseResult$audits$"largest-contentful-paint"$score
LCP <- res$lighthouseResult$audits$"largest-contentful-paint"$numericValue
#total score
TotalScore <- res$lighthouseResult$categories$performance$score
speed_ranker_df <- speed_ranker_df %>% add_row(link = uri,
TTL_score = TTL_score,
TTL = TTL,
TBT_score = TBT_score,
TBT = TBT,
FCP_score = FCP_score,
FCP= FCP,
SI_score = SI_score,
SI = SI,
CLS_score = CLS_score,
CLS = CLS,
LCP_score = LCP_score,
LCP = LCP,
TotalScore = TotalScore)
}
speed_ranker_df <- rbind(r4_finished, speed_ranker_df)
write_csv(speed_ranker_df, "./data/PageSpeed_rank2.csv")
library(tidyverse)
library(rvest)
library(XML)
library(ggplot2)
library(ggridges)
library(dplyr)
library(broom)
library(AICcmodavg)
library(car)
library(ggpubr)
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
library(tidyverse)
library(rvest)
library(XML)
library(ggplot2)
library(ggridges)
library(dplyr)
library(broom)
library(AICcmodavg)
library(car)
library(ggpubr)
search_data <- read_csv("./data/search_data.csv")
language_dict <- c("en" = "english", "ru" = "russian", "iw" = "hebrew", "ar" = "arabic")
term_df <- read_csv("./data/term_classified.csv")
result_num <- search_data %>%
left_join(term_df, by ="termId") %>%
select(termId, englishTerm, language, resultNum, Class) %>%
set_names(c("termId", "searchTerm", "language", "resultNum", "class")) %>%
mutate(language = language_dict[language])%>%
pivot_wider(names_from = language, values_from = resultNum) %>%
mutate(total_results = english + russian + hebrew + arabic)
search_data <- search_data %>% left_join(term_df, by ="termId" )
result_num
search_data %>%
filter(termId == 29) %>%
filter(language == "ar")
search_data %>%
filter(termId %in% c(39, 42)) %>%
filter(language == "iw")
mean_hebrew <- result_num %>%
filter(termId != 39 & termId != 42)
mean_hebrew_class1<- mean((mean_hebrew %>% filter(class == 1))$hebrew)
mean_hebrew_class2 <- mean((mean_hebrew %>% filter(class == 2))$hebrew)
result_num <- result_num %>%
mutate(hebrew = ifelse(termId == 39, mean_hebrew_class1, hebrew))%>%
mutate(hebrew = ifelse(termId == 42, mean_hebrew_class2, hebrew))%>%
mutate(total_results = english + russian + hebrew + arabic)
result_num_2 <- result_num %>%
pivot_longer(cols = c(english, russian, hebrew, arabic), names_to = "language")
ggplot(result_num_2 ,mapping = aes(x = factor(language, level = c("english", "arabic", "russian", "hebrew")), y = value, fill = language))+
geom_boxplot()+
scale_y_continuous(trans = 'log10') +
theme_classic()+
scale_fill_brewer(palette="Spectral")+
labs(x = "language", y = "results number", title = "boxplot of result number for each language", subtitle = "log10 scale")
one_way_anova <- aov(value ~ language, data = result_num_2)
summary(one_way_anova)
t.test(x = result_num$english, y = result_num$hebrew,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$english, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$english, y = result_num$arabic,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$arabic, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$hebrew, y = result_num$arabic,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$hebrew, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
result_num_3 <- result_num_2 %>%
mutate(language = paste(language, as.character(class)))
ggplot(result_num_3 ,
mapping = aes(x = factor(language, level = c("english 1","english 2", "arabic 1", "arabic 2" , "russian 1", "russian 2", "hebrew 1","hebrew 2")),
y = value, fill = language))+
geom_boxplot()+
scale_y_continuous(trans = 'log10') +
theme_classic()+
scale_fill_brewer(palette="Spectral")+
labs(x = "language and class", y = "results number", title = "boxplot of result number for each language", subtitle = "log10 scale")
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(class = as.character(Class))
library(tidyverse)
library(rvest)
library(XML)
library(ggplot2)
library(ggridges)
library(dplyr)
library(broom)
library(AICcmodavg)
library(car)
library(ggpubr)
search_data <- read_csv("./data/search_data.csv")
language_dict <- c("en" = "english", "ru" = "russian", "iw" = "hebrew", "ar" = "arabic")
term_df <- read_csv("./data/term_classified.csv")
result_num <- search_data %>%
left_join(term_df, by ="termId") %>%
select(termId, englishTerm, language, resultNum, Class) %>%
set_names(c("termId", "searchTerm", "language", "resultNum", "class")) %>%
mutate(language = language_dict[language])%>%
pivot_wider(names_from = language, values_from = resultNum) %>%
mutate(total_results = english + russian + hebrew + arabic)
search_data <- search_data %>% left_join(term_df, by ="termId" )
result_num
search_data %>%
filter(termId == 29) %>%
filter(language == "ar")
search_data %>%
filter(termId %in% c(39, 42)) %>%
filter(language == "iw")
mean_hebrew <- result_num %>%
filter(termId != 39 & termId != 42)
mean_hebrew_class1<- mean((mean_hebrew %>% filter(class == 1))$hebrew)
mean_hebrew_class2 <- mean((mean_hebrew %>% filter(class == 2))$hebrew)
result_num <- result_num %>%
mutate(hebrew = ifelse(termId == 39, mean_hebrew_class1, hebrew))%>%
mutate(hebrew = ifelse(termId == 42, mean_hebrew_class2, hebrew))%>%
mutate(total_results = english + russian + hebrew + arabic)
result_num_2 <- result_num %>%
pivot_longer(cols = c(english, russian, hebrew, arabic), names_to = "language")
ggplot(result_num_2 ,mapping = aes(x = factor(language, level = c("english", "arabic", "russian", "hebrew")), y = value, fill = language))+
geom_boxplot()+
scale_y_continuous(trans = 'log10') +
theme_classic()+
scale_fill_brewer(palette="Spectral")+
labs(x = "language", y = "results number", title = "boxplot of result number for each language", subtitle = "log10 scale")
one_way_anova <- aov(value ~ language, data = result_num_2)
summary(one_way_anova)
t.test(x = result_num$english, y = result_num$hebrew,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$english, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$english, y = result_num$arabic,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$arabic, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$hebrew, y = result_num$arabic,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$hebrew, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
result_num_3 <- result_num_2 %>%
mutate(language = paste(language, as.character(class)))
ggplot(result_num_3 ,
mapping = aes(x = factor(language, level = c("english 1","english 2", "arabic 1", "arabic 2" , "russian 1", "russian 2", "hebrew 1","hebrew 2")),
y = value, fill = language))+
geom_boxplot()+
scale_y_continuous(trans = 'log10') +
theme_classic()+
scale_fill_brewer(palette="Spectral")+
labs(x = "language and class", y = "results number", title = "boxplot of result number for each language", subtitle = "log10 scale")
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(class = as.character(class))
result_num_4_hebrew
ggplot(data=result_num_4_hebrew, aes(x=value, fill = class)) +
geom_density(alpha = 0.3) +
labels(title ="density plot of result number in Hebrew nurmalize by english result number \nsplit to contemporary and non-contemporary groups")
search_data <- read_csv("./data/search_data.csv")
language_dict <- c("en" = "english", "ru" = "russian", "iw" = "hebrew", "ar" = "arabic")
term_df <- read_csv("./data/term_classified.csv")
result_num <- search_data %>%
left_join(term_df, by ="termId") %>%
select(termId, englishTerm, language, resultNum, Class) %>%
set_names(c("termId", "searchTerm", "language", "resultNum", "class")) %>%
mutate(language = language_dict[language])%>%
pivot_wider(names_from = language, values_from = resultNum) %>%
mutate(total_results = english + russian + hebrew + arabic)
search_data <- search_data %>% left_join(term_df, by ="termId" )
result_num
search_data %>%
filter(termId == 29) %>%
filter(language == "ar")
search_data %>%
filter(termId %in% c(39, 42)) %>%
filter(language == "iw")
mean_hebrew <- result_num %>%
filter(termId != 39 & termId != 42)
mean_hebrew_class1<- mean((mean_hebrew %>% filter(class == 1))$hebrew)
mean_hebrew_class2 <- mean((mean_hebrew %>% filter(class == 2))$hebrew)
result_num <- result_num %>%
mutate(hebrew = ifelse(termId == 39, mean_hebrew_class1, hebrew))%>%
mutate(hebrew = ifelse(termId == 42, mean_hebrew_class2, hebrew))%>%
mutate(total_results = english + russian + hebrew + arabic)
result_num_2 <- result_num %>%
pivot_longer(cols = c(english, russian, hebrew, arabic), names_to = "language")
ggplot(result_num_2 ,mapping = aes(x = factor(language, level = c("english", "arabic", "russian", "hebrew")), y = value, fill = language))+
geom_boxplot()+
scale_y_continuous(trans = 'log10') +
theme_classic()+
scale_fill_brewer(palette="Spectral")+
labs(x = "language", y = "results number", title = "boxplot of result number for each language", subtitle = "log10 scale")
one_way_anova <- aov(value ~ language, data = result_num_2)
summary(one_way_anova)
t.test(x = result_num$english, y = result_num$hebrew,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$english, y = result_num$russian,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
t.test(x = result_num$english, y = result_num$arabic,
alternative = "two.sided",
paired = TRUE, var.equal = FALSE,
conf.level = 0.95)
result_num_3 <- result_num_2 %>%
mutate(language = paste(language, as.character(class)))
ggplot(result_num_3 ,
mapping = aes(x = factor(language, level = c("english 1","english 2", "arabic 1", "arabic 2" , "russian 1", "russian 2", "hebrew 1","hebrew 2")),
y = value, fill = language))+
geom_boxplot()+
scale_y_continuous(trans = 'log10') +
theme_classic()+
scale_fill_brewer(palette="Spectral")+
labs(x = "language and class", y = "results number", title = "boxplot of result number for each language", subtitle = "log10 scale")
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(class = as.character(class))
result_num_4_hebrew
ggplot(data=result_num_4_hebrew, aes(x=value, fill = class)) +
geom_density(alpha = 0.3) +
labels(title ="density plot of result number in Hebrew nurmalize by english result number \nsplit to contemporary and non-contemporary groups")
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(Class = as.character(Class))
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(Class = as.character(Class))
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(class = as.character(class))
result_num_4_hebrew
ggplot(data=result_num_4_hebrew, aes(x=value, fill = class)) +
geom_density(alpha = 0.3) +
labels(title ="density plot of result number in Hebrew nurmalize by english result number \nsplit to contemporary and non-contemporary groups")
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(class = as.character(class))
result_num_4_hebrew
ggplot(data=result_num_4_hebrew, aes(x=value, fill = class)) +
geom_density(alpha = 0.3) +
labels(title ="density plot of result number in Hebrew nurmalize by english result number \nsplit to contemporary and non-contemporary groups")+
theme_minimal()
result_num
result_num_4 <- result_num %>%
mutate(russian = russian / english *100,
hebrew = hebrew / english *100,
arabic = arabic / english *100) %>%
select(searchTerm, class, russian, hebrew, arabic) %>%
pivot_longer(cols = c(russian, hebrew, arabic), names_to = "language")
result_num_4_hebrew <- result_num_4 %>% filter(language == "hebrew") %>% mutate(class = as.character(class))
result_num_4_hebrew
ggplot(data=result_num_4_hebrew, aes(x=value, fill = class)) +
geom_density(alpha = 0.3) +
theme_minimal()
res <- wilcox.test((result_num_4_hebrew %>% filter(class == "1"))$value , (result_num_4_hebrew %>% filter(class == "2"))$value , alternative = "two.sided")
res
